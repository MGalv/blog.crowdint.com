<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Crowd Interactive Tech Blog</title>
 <link href="http://blog.crowdint.com/atom.xml" rel="self"/>
 <link href="http://blog.crowdint.com/"/>
 <updated>2010-10-28T13:31:21-05:00</updated>
 <id>http://blog.crowdint.com</id>
 
 
 <entry>
   <title>Working with PostgreSQL and Rails3</title>
   <link href="http://blog.crowdint.com/2010/10/27/working-with-postgresql-and-rails3.html"/>
   <updated>2010-10-27T00:00:00-05:00</updated>
   <id>http://blog.crowdint.com/2010/10/27/working-with-postgresql-and-rails3</id>
   <content type="html">&lt;p&gt;Now, since Rails3 is released, many projects come to be on their phase of migration, but this time I'll show you how I got my Rails environment to work with PostgreSQL.&lt;/p&gt;

&lt;p&gt;It's very important to carefully decide which database will be used for your application and what you really care about: Performance, Security, Availability; so in this case we'll just state that we need Security and Availability regardless of Performance, which better approaches us to PostgreSQL. It's important to say that I did this in Ubuntu 10.04 - Lucid Lynx distro.&lt;/p&gt;

&lt;p&gt;OK so, let's begin with our brief trip&lt;/p&gt;

&lt;h2&gt;Installing Ruby&lt;/h2&gt;

&lt;p&gt;I'd personally recommend using &lt;a href=&quot;http://rvm.beginrescueend.com/&quot;&gt;RVM&lt;/a&gt; (Ruby Version Manager) to manage Ruby versions since it's pretty easy to switch, install or remove any version you'd like to test, so let's run:&lt;/p&gt;

&lt;p&gt;and switch to that ruby version by running:&lt;/p&gt;

&lt;h2&gt;Installing Rails&lt;/h2&gt;

&lt;p&gt; When we're ready to use ruby, lets install Rails, if you want, you could install it in any gemset defined in rvm by executing 'rvm gemset create &lt;em&gt;&amp;lt;gemset_name&gt;&lt;/em&gt;' and 'rvm gemset use &lt;em&gt;&amp;lt;gemset_name&gt;&lt;/em&gt;', so after this we do:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: if you're using RVM you don't need to use SUDO for Debian based operating systems.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Installing PostgreSQL with Visual Administrator&lt;/h2&gt;

&lt;p&gt;Once we have it on the rails, let's proceed to the main business... Installing PostgreSQL:&lt;/p&gt;

&lt;p&gt; Aditionally you can install &lt;em&gt;'pgadmin'&lt;/em&gt; visual management tool to make queries, add users or manage any other information from your databases with:&lt;/p&gt;

&lt;p&gt;OK, so at this point we have PostgreSQL installed in our system, so... what's next?? Go to sleep? Don't despair! we're near...
 As you can see, we have Rails3 and PostgreSQL installed separately; all we need is an adapter to communicate each other, how do we do it? Easily, just add pg gem to your Gemfile:&lt;/p&gt;

&lt;p&gt;And run the bundler:&lt;/p&gt;

&lt;p&gt;And in your &lt;em&gt;'config/database.yml'&lt;/em&gt; file use &lt;em&gt;'postgresql'&lt;/em&gt; as your adapter for each environment.&lt;/p&gt;

&lt;p&gt;You could use &lt;em&gt;'postgres'&lt;/em&gt; as the username, but, I'd recommend using a different one. To create it you'll first have to connect to PostgreSQL server by doing:&lt;/p&gt;

&lt;p&gt;This will let you into PostgreSQL command line where you can tell the DBMS what you want to do, lets tell it we didn't like that name and create our own:&lt;/p&gt;

&lt;p&gt;I put some words in capital so you can identify the reserved words that PostgreSQL uses and in &lt;em&gt;&amp;lt;&gt;&lt;/em&gt; tags you can put your own information.
So this will create a user with database and user creation permissions with a defined password.&lt;/p&gt;

&lt;p&gt;But if you opted to keep using &lt;em&gt;'postgres'&lt;/em&gt; user, you can always change the password with:&lt;/p&gt;

&lt;p&gt;Note: Don't forget to put &lt;em&gt;';' (semicollon)&lt;/em&gt; at the end of each instruction in PostgreSQL console&lt;/p&gt;

&lt;h2&gt;Configuring our database.yml to use PostgreSQL adapter&lt;/h2&gt;

&lt;p&gt;And finally, we have to put that information into your &lt;em&gt;'config/database.yml'&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;And that's it! We can test our connection by creating a model and putting some data in it, but don't forget to &lt;em&gt;follow the BDD with Cucumber and RSpec cycle!&lt;/em&gt; That's very important!&lt;/p&gt;

&lt;p&gt;This is my first post so I'll appreciate any feedback, if there is any problem with the steps or additional help I may give you... Thank you in advance!&lt;/p&gt;
</content>
   <author>
     <name>Luis Velasco</name>
     <email>luis.velasco@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Improve your SEO with a sitemap</title>
   <link href="http://blog.crowdint.com/2010/10/22/improve-your-seo-with-a-sitemap.html"/>
   <updated>2010-10-22T00:00:00-05:00</updated>
   <id>http://blog.crowdint.com/2010/10/22/improve-your-seo-with-a-sitemap</id>
   <content type="html">&lt;p&gt;Having a sitemap is the way search engines like Google, Yahoo, Bing and others can crawl the information of all of the urls in our website.&lt;/p&gt;

&lt;p&gt;There are tools for generating sitemaps, we could use one of those tools if our website is static and it doesn't change that often. But, if we have a website that is continuously changing and generating new urls, we would need a way to dynamically generate our sitemap on a regular basis.&lt;/p&gt;

&lt;p&gt;Let's use Rails to dynamically generate a sitemap on request.&lt;/p&gt;

&lt;p&gt;In our example we will assume we have a small e-commerce website where we have categories for the products. So, the first thing we do is to define a controller action:&lt;/p&gt;

&lt;p&gt;With this method defined, we retrieve all the categories we want to have on the sitemap. And the next step is to create the xml format to display all the urls, we will create a template called sitemap.rxml&lt;/p&gt;

&lt;p&gt;Pretty simple, don't you think? We just have to iterate through our collection to generate all the links from our categories. The parameter &lt;em&gt;:only_path =&gt; false&lt;/em&gt; is necessary to produce the absolute url of our website as sitemaps require to have a protocol and a domain.&lt;/p&gt;

&lt;p&gt;The parameters of the xml are straightforward:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;loc&lt;/em&gt; is the url&lt;/li&gt;
&lt;li&gt;&lt;em&gt;lastmod&lt;/em&gt; is the last modified date of that url&lt;/li&gt;
&lt;li&gt;&lt;em&gt;changefreq&lt;/em&gt; is how often this url is updated&lt;/li&gt;
&lt;li&gt;&lt;em&gt;priority&lt;/em&gt; is the importance of this url compared to the rest of the urls in our website&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As a final step, we add the route to the sitemap in &lt;em&gt;config/routes.rb&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And that's it, if we go to our www.website.com/sitemap.xml we will be able to see our generated sitemap.&lt;/p&gt;

&lt;p&gt;If we want our sitemap to be generated periodically, we can create a rake task to call this method and use a cron job to schedule it for example, once a week.&lt;/p&gt;

&lt;p&gt;Give it a try and you will have a nice and easy way to generate the sitemap.xml for your webiste!&lt;/p&gt;
</content>
   <author>
     <name>Roberto Sanchez</name>
     <email>roberto.sanchez@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Magma Rails 2010, a success!</title>
   <link href="http://blog.crowdint.com/2010/10/18/magmarails-2010-was-a-success.html"/>
   <updated>2010-10-18T00:00:00-05:00</updated>
   <id>http://blog.crowdint.com/2010/10/18/magmarails-2010-was-a-success</id>
   <content type="html">&lt;p&gt;And it's all thanks to &lt;em&gt;you&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We will be posting all the pictures, slides and videos in the &lt;a href=&quot;http://www.magmarails.com&quot;&gt;official Magma Rails site&lt;/a&gt; as soon as we're done organizing and encoding everything.&lt;/p&gt;

&lt;p&gt;However, if you are impatient, you can take a peek at what it was like through it's &lt;a href=&quot;http://bit.ly/bm3a4J&quot;&gt;Hashalbum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I loved the crowd's reaction to the event, and we're hoping it helped them catch some inspiration to choose a career path on the wonderful world of Ruby on Rails.&lt;/p&gt;

&lt;p&gt;We still feel so excited about Magma Rails that, the 2011 edition is already being planned. Remember to send all the feedback you can to &lt;em&gt;info@magmarails.com&lt;/em&gt;, we'd love to hear from you on how to improve the event for next year. (We already know that the lack of internet in the room was a big disappointment so, don't bother sending feedback about that ;) )&lt;/p&gt;

&lt;div style=&quot;text-align:center; margin: 10px&quot;&gt;
  &lt;a href=&quot;http://www.magmarails.com&quot;&gt;&lt;img src=&quot;/images/2010/10/18/entrance.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Thanks again to everyone involved.&lt;/p&gt;

&lt;p&gt;Hope to see you next year!&lt;/p&gt;
</content>
   <author>
     <name>David Padilla</name>
     <email>david@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Magma Rails is just around the corner!</title>
   <link href="http://blog.crowdint.com/2010/10/07/magma-rails.html"/>
   <updated>2010-10-07T00:00:00-05:00</updated>
   <id>http://blog.crowdint.com/2010/10/07/magma-rails</id>
   <content type="html">&lt;p&gt;We're very proud and excited to be host to this great event that will take place in the city of Colima, Mexico.&lt;/p&gt;

&lt;p&gt;Magma Rails symbolizes the beginning of Crowd Interactive's quest for establishing RoR as the best option for web 2.0 development in MÃ©xico.&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;a href=&quot;http://www.magmarails.com&quot;&gt;&lt;img src=&quot;/images/2010/10/07/bluetooth.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;More info on the site: &lt;a href=&quot;http://www.magmarails.com&quot;&gt;http://www.magmarails.com&lt;/a&gt;&lt;/p&gt;
</content>
   <author>
     <name>David Padilla</name>
     <email>david@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Negative Code</title>
   <link href="http://blog.crowdint.com/2010/09/28/negative-code.html"/>
   <updated>2010-09-28T00:00:00-05:00</updated>
   <id>http://blog.crowdint.com/2010/09/28/negative-code</id>
   <content type="html">&lt;p&gt;Last night I was checking certain social network at home, you know, the usual bad habit, when suddenly I found a phrase that caught my attention. What was that uncertain concept that attracted my senses? Well, it was &quot;negative code&quot;. &quot;What is it?&quot; I thought.&lt;/p&gt;

&lt;p&gt;As astonished as I was at that time, I took a few seconds to ask my old fellow (&lt;a href=&quot;http://www.google.com&quot;&gt;G...&lt;/a&gt;) &quot;what is negative code?&quot;. Of course, as wise as always, it showed me several conversations about that interesting topic. I found many concepts thrown in the air, but nothing that I could define the concept until I found &lt;a href=&quot;http://stackoverflow.com/questions/3800707/what-is-negative-code&quot;&gt;this&lt;/a&gt; discussion at &lt;a href=&quot;http://stackoverflow.com&quot;&gt;stackoverflow&lt;/a&gt;. A user named Thilo mentioned a concept that barely filled my expectations, and here is it:&lt;/p&gt;

&lt;p&gt;  &quot;...reducing lines of code, by removing redundancies or using more concise constructs&quot;.&lt;/p&gt;

&lt;p&gt;Well, that means something, doesnât it? Well, yes, but at the same time I felt something was missing. I thought, &quot;Ok, everybody knows that if you code to write less code, but obtain a correct result, that code becomes in saving code lines! But! That isn't negative code!&quot;.&lt;/p&gt;

&lt;p&gt;A little shocked and confused I continued reading below on the discussion. Thilo also quoted an old anecdote he found:&lt;/p&gt;

&lt;p&gt;  &quot;When the Lisa team was pushing to finalize their software in 1982, project managers started requiring programmers to submit weekly forms reporting on the number of lines of code they had written. Bill Atkinson thought that was silly. For the week in which he had rewritten QuickDrawâs region calculation routines to be six times faster and 2000 lines shorter, he put &quot;-2000&quot; on the form. After a few more weeks the managers stopped asking him to fill out the form, and he gladly complied.&quot;&lt;/p&gt;

&lt;p&gt;Sometimes I think I'm just slow, because I didn't understand what this was trying to say at the beginning. I ask myself:&lt;/p&gt;

&lt;p&gt;&quot;Why managers stopped to bother him after he wrote -2000 LOC? I know, he improved the system throwing away the fat and... oh, I see!&quot;.&lt;/p&gt;

&lt;p&gt;Yes, that was the answer I was looking for. But, what does it mean? Well, as I understood the re-factory concept fits perfectly to negative code, and let me explain why.&lt;/p&gt;

&lt;p&gt;Sometimes, we found many new problems to solve in our way and we keep coding and coding until we solve them. There will be times where our code is optimal, but that's not the case all of the time. Sometimes we find old and reviewed problems we already solved before, and we force the same solution to fit those new questions. As time passes these code lines become obsolete. The old code is worth nothing now. What should we do?&lt;/p&gt;

&lt;p&gt;Well, there are two solutions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We keep updating our code to fit new requirements; we make it more robust, more stable and more compatible with old code.&lt;/li&gt;
&lt;li&gt;Or we just simply throw away that old code and we remake it. Writing lean code, &quot;same result less code&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All those LOC we &quot;saved&quot;, or that we didn't write, that is negative code.&lt;/p&gt;

&lt;p&gt;We usually fall in a hole when someone says &quot;do not re-invent the wheel, re-use&quot;. That, in a way, is correct. Why should you create a new tool if there are many out there? The answer is simple: sometimes, it's more than you need at the moment. Period.&lt;/p&gt;

&lt;p&gt;Remember, the less code you use, the less code you maintain!&lt;/p&gt;

&lt;p&gt;I encourage you to find better ways to solve the same problem. Throw away those awful lines you wanted to forget and improve them.&lt;/p&gt;
</content>
   <author>
     <name>Luis Galaviz</name>
     <email>luis.galaviz@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>First contact with regular expressions</title>
   <link href="http://blog.crowdint.com/2010/09/22/first-contact-with-regular-expressions.html"/>
   <updated>2010-09-22T00:00:00-05:00</updated>
   <id>http://blog.crowdint.com/2010/09/22/first-contact-with-regular-expressions</id>
   <content type="html">&lt;p&gt;If you're looking for a way to save yourself some lines of code along with some time thinking about match cases, regular expressions are your friend. Mainly used to recognize patterns, a regular expression is a way to specify a pattern of characters to be searched within a string.&lt;/p&gt;

&lt;p&gt;They are built within forward slashes and they even have their own class&lt;/p&gt;

&lt;h2&gt;Taxonomy of a Regular Expression&lt;/h2&gt;

&lt;p&gt;If you've seen a regular expression before, they must look scary to you; in fact, that's the reason why many developers won't take the time to learn about them. Underneath such a scary mob of characters, there a extremely simple structure:&lt;/p&gt;

&lt;p&gt;Also, in Ruby you can express a regular expression in two alternate ways:&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;match&lt;/em&gt; method and the operator &lt;em&gt;=~&lt;/em&gt; can be used to verify if a string matches a regular expression:&lt;/p&gt;

&lt;p&gt;When using the &lt;em&gt;match&lt;/em&gt; method, the returned value is the matched string or &lt;em&gt;nil&lt;/em&gt; if no match was found. The class of the object that received the assignment is &lt;em&gt;MatchData&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Building regular expressions&lt;/h2&gt;

&lt;p&gt;To start building our own regular expressions, there is a couple of lists we have to become familiar with:&lt;/p&gt;

&lt;h3&gt;1. Special Characters&lt;/h3&gt;

&lt;p&gt;Some characters have a special meaning in regular expressions, and must be escaped to prevent them from processing and be able to search for them. The escape character used is &lt;strong&gt;\&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;Special characters list&lt;/h4&gt;

&lt;p&gt;^&lt;br/&gt;
$&lt;br/&gt;
?&lt;br/&gt;
.&lt;br/&gt;
/&lt;br/&gt;
\&lt;br/&gt;
[&lt;br/&gt;
]&lt;br/&gt;
{&lt;br/&gt;
}&lt;br/&gt;
(&lt;br/&gt;
)&lt;br/&gt;
+&lt;br/&gt;
*&lt;/p&gt;

&lt;h3&gt;2. Types of expressions&lt;/h3&gt;

&lt;p&gt;The most common patterns we can specify in a regular expressions are included in the following table:&lt;/p&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;expression&lt;/th&gt;
        &lt;th&gt;meaning&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
        &lt;td&gt;.&lt;/td&gt;
        &lt;td&gt;any character&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
        &lt;td&gt;[ ]&lt;/td&gt;
        &lt;td&gt;specify a range (e.g. [a-z] means a letter from a to z)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
        &lt;td&gt;\w&lt;/td&gt;
        &lt;td&gt;letter or digit; same as [0-9A-Za-z]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
        &lt;td&gt;\W&lt;/td&gt;
        &lt;td&gt;any character but letter or a number&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
        &lt;td&gt;\s&lt;/td&gt;
        &lt;td&gt;space character; same as [ \t\n\r\f]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
      &lt;td&gt;\S&lt;/td&gt;
      &lt;td&gt;any character but a space space char&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
      &lt;td&gt;\d&lt;/td&gt;
      &lt;td&gt;a number; same as [0-9]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
      &lt;td&gt;\D&lt;/td&gt;
      &lt;td&gt;any character but a number&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
      &lt;td&gt;\b&lt;/td&gt;
      &lt;td&gt;backspace (0x08), only within a range&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
      &lt;td&gt;\b&lt;/td&gt;
      &lt;td&gt;word limit, if NOT within a range&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
      &lt;td&gt;\B&lt;/td&gt;
      &lt;td&gt;not word limit&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
      &lt;td&gt;*&lt;/td&gt;
      &lt;td&gt;zero or more matches of the preceding&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
      &lt;td&gt;+&lt;/td&gt;
      &lt;td&gt;one or more matches of the preceding&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
      &lt;td&gt;^&lt;/td&gt;
      &lt;td&gt;matches the beginning of a line&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
      &lt;td&gt;$&lt;/td&gt;
      &lt;td&gt;matches the end of a line&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;\A&lt;/td&gt;
        &lt;td&gt;matches the beginning of the string&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;\z&lt;/td&gt;
        &lt;td&gt;matches the end of the string (\Z will do the same unless the string ends with a '\n', in which case it matches just before the '\n')&lt;/td&gt;
  &lt;tr&gt;
      &lt;td&gt;{m[,n]}&lt;/td&gt;
      &lt;td&gt;at least 'm', topping 'n' matches of the preceeding ('n' is optional)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
      &lt;td&gt;?&lt;/td&gt;
      &lt;td&gt;at least one match of the preceeding (same as {1})&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
      &lt;td&gt;( )&lt;/td&gt;
      &lt;td&gt;group expressions&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;|&lt;/td&gt;
        &lt;td&gt;logical operator 'or', in [a|b] looks for a OR b&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;


&lt;h2&gt;Common examples&lt;/h2&gt;

&lt;h3&gt;The e-mail address&lt;/h3&gt;

&lt;p&gt;This is a very common pattern example (it's the one that you get by default in &lt;a href=&quot;&quot; title=&quot;http://rubular.com&quot;&gt;Rubular&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;First, '\A' makes sure to match the string against the start of string; then ([&lt;sup&gt;@\s]+)&lt;/sup&gt; groups the recipient's name, avoiding @ character and space characters.&lt;/p&gt;

&lt;p&gt;After the recipient's name, we have the @ character and then we have a group with two groups inside: (?:[-a-z0-9]+.) which only matches to alpha-numeric characters plus a single dot at least once; and then +[a-z]{2,}, at least two alpha-numeric characters for the domain.&lt;/p&gt;

&lt;p&gt;Finally, the '\Z' makes sure to match the end of line&lt;/p&gt;

&lt;h3&gt;The phone number&lt;/h3&gt;

&lt;p&gt;First, ((\d{3}))\s+ will look for a group of three numeric characters enclosed by parenthesis and a blank space at least once; then (\d{3})- searches for three numeric characters and dash, and finally (\d{4}) will look for the final four numeric characters.&lt;/p&gt;

&lt;h2&gt;Where to look for more information&lt;/h2&gt;

&lt;p&gt;The star of these links is &lt;a href=&quot;&quot; title=&quot;http://rubular.com&quot;&gt;Rubular&lt;/a&gt;
but there are some few more useful links to look at:
&lt;a href=&quot;http://www.regular-expressions.info/ruby.html&quot;&gt;http://www.regular-expressions.info/ruby.html&lt;/a&gt;
&lt;a href=&quot;http://www.rubyist.net/~slagell/ruby/regexp.html&quot;&gt;http://www.rubyist.net/~slagell/ruby/regexp.html&lt;/a&gt;
&lt;a href=&quot;http://www.ruby-doc.org/docs/ProgrammingRuby/html/language.html#UJ&quot;&gt;http://www.ruby-doc.org/docs/ProgrammingRuby/html/language.html#UJ&lt;/a&gt;
&lt;a href=&quot;http://www.ruby-doc.org/docs/ProgrammingRuby/html/ref_c_regexp.html#Regexp.new&quot;&gt;http://www.ruby-doc.org/docs/ProgrammingRuby/html/ref_c_regexp.html#Regexp.new&lt;/a&gt;
&lt;a href=&quot;http://www.troubleshooters.com/codecorn/ruby/basictutorial.htm&quot;&gt;http://www.troubleshooters.com/codecorn/ruby/basictutorial.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
   <author>
     <name>Francisco Guzm&amp;aacute;n</name>
     <email>francisco.guzman@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Installing gems skipping RDoc and RI</title>
   <link href="http://blog.crowdint.com/2010/09/17/installing-gems-skipping-rdoc-and-ri.html"/>
   <updated>2010-09-17T00:00:00-05:00</updated>
   <id>http://blog.crowdint.com/2010/09/17/installing-gems-skipping-rdoc-and-ri</id>
   <content type="html">&lt;p&gt;Because, let's be honest, these days, we're always connected to the internet.&lt;/p&gt;

&lt;p&gt;Personally, I've never used the RDoc included on gem installations.&lt;/p&gt;

&lt;p&gt;If I need info about a class, method, module, I ask uncle &lt;em&gt;Google&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Besides, it gets kind of annoying, specially when there's gems that take longer to generate the RDoc, than it takes for the actual gem to install.&lt;/p&gt;

&lt;p&gt;So, here's a tip for those who don't want to wait for gem to install RDoc you'll never use.&lt;/p&gt;

&lt;p&gt;It is as simple as, opening or creating a &lt;em&gt;.gemrc&lt;/em&gt; file in your home directory, and adding the following line:&lt;/p&gt;

&lt;p&gt;And that's it. You're setting those options as default when using the gem command. So, the next time you install a gem, it will skip the part where it compiles the gem's documentation.&lt;/p&gt;

&lt;p&gt;There you go, enjoy!&lt;/p&gt;
</content>
   <author>
     <name>David Padilla</name>
     <email>david@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Customize your Generators Workflow in Rails 3.0.0</title>
   <link href="http://blog.crowdint.com/2010/09/10/customize-your-generators-workflow.html"/>
   <updated>2010-09-10T00:00:00-05:00</updated>
   <id>http://blog.crowdint.com/2010/09/10/customize-your-generators-workflow</id>
   <content type="html">&lt;p&gt;When we talk about a concept like DRY, we usually associate it with coding (partials, controllers, models, helpers, rakes, automatic deploys, etc.), and all that other stuff. We don't usually realize that, what we do on our day by day, like, when we create new layers, controllers, test fixtures, etc. we create (sometimes) a big source of waste.&lt;/p&gt;

&lt;p&gt;We have to remember that the DRY concept was conceived with the idea to avoid as much waste as we can. So, why do we need to waste time creating all we we need by separate, for example, when we create a new controller, or model?&lt;/p&gt;

&lt;p&gt;Fortunately, Rails 3 provides an easy way to configure your generators and make it easy for us to customize them, you can even customize their workflow.&lt;/p&gt;

&lt;p&gt;So, let's try an example:&lt;/p&gt;

&lt;h2&gt;Hands on!&lt;/h2&gt;

&lt;p&gt;First, we need to create a new Rails Project:&lt;/p&gt;

&lt;p&gt;In our case, we will exclude Test::Unit because we will use Cucumber and RSpec. You can easily do that with the -T option:&lt;/p&gt;

&lt;p&gt;Ok, now we can configure our Gemfile. We need haml, cucumber, capybara and rspec:&lt;/p&gt;

&lt;p&gt;Then, we just need to install our gems to start playing with our generators:&lt;/p&gt;

&lt;p&gt;And, that's it! Now we have a perfect (almost) environment to work with.&lt;/p&gt;

&lt;h2&gt;Generators&lt;/h2&gt;

&lt;p&gt;Now, let's invoke a Rails generator to create a new controller called Test:&lt;/p&gt;

&lt;p&gt;This function is just going to invoke many other generators, to create something like this:&lt;/p&gt;

&lt;p&gt;As you can see, this generator is still invoking Test::Unit as our test environment, but what we want is to invoke Rspec, so let's change our generators workflow. First we need to install Rspec and Cucumber on our project:&lt;/p&gt;

&lt;p&gt;Then, just add these lines to our '~/application.erb'&lt;/p&gt;

&lt;p&gt;If we try to generate a new controller called RspecTest something like this will show up:&lt;/p&gt;

&lt;p&gt;We could also specify that we don't want to create view specs just by adding ':views =&gt; false' in our '~/application.erb' like this:&lt;/p&gt;

&lt;p&gt;Now what? Do you want to create your own generator? Generators, can even generate generators (sounds like a tongue twisters), check this out:&lt;/p&gt;

&lt;p&gt;This generator creates the files you need to start working. How does it work? Well, it's simple. Basically a directory named &quot;generators&quot; is created in your lib folder and, 'my_generator'_generator.rb is where you will put your generator logic, USAGE describes what your generator makes and 'templates' is where you will put you generator templates.&lt;/p&gt;

&lt;p&gt;What commands can you use inside your generator? Rails 3 generators were created on top of &lt;a href=&quot;http://github.com/wycats/thor&quot;&gt;Thor&lt;/a&gt;, so you could check Thor &lt;a href=&quot;http://rdoc.info/github/wycats/thor/master&quot;&gt;documentation&lt;/a&gt;, and also there is a great document you can follow on &lt;a href=&quot;http://edgeguides.rubyonrails.org/generators.html&quot;&gt;RailsGuides&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anyway, if you want to know more about an specific generator, you could use this command:&lt;/p&gt;

&lt;p&gt;There is a list of generators that Rails can handle, also there are others hidden in many gems. If you wan to obtain a lot of helpful generators, I'd recommend you check the &lt;a href=&quot;http://github.com/indirect/rails3-generators&quot;&gt;rails3-generators&lt;/a&gt; gem, there are many helpful generators that can make your coding more DRY.&lt;/p&gt;

&lt;p&gt;By the way, there are other things I can't make them to do. For example, if I try to use &quot;my_test_method_generator&quot; as follows, I get an error:&lt;/p&gt;

&lt;p&gt;in &quot;application.rb&quot;:&lt;/p&gt;

&lt;p&gt;in you terminal:&lt;/p&gt;

&lt;p&gt;However, generators can really help you when you try to be as DRY as possible. So, try it, you might like it.&lt;/p&gt;
</content>
   <author>
     <name>Luis Galaviz</name>
     <email>luis.galaviz@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>A simple way to setup a class for global values</title>
   <link href="http://blog.crowdint.com/2010/09/06/a-simple-way-to-setup-a-class-for-global-values.html"/>
   <updated>2010-09-06T00:00:00-05:00</updated>
   <id>http://blog.crowdint.com/2010/09/06/a-simple-way-to-setup-a-class-for-global-values</id>
   <content type="html">&lt;p&gt;Most everytime we are working on a Rails app, we face the need to set up config values for said app; this is a good practice to avoid hardcoded lines. For example, think of the Application Name value... if you had to use it over a hundred times in your views (including mailers), wouldn't you want it to be called from a class so if your app name's ever changes, well... you wouldn't have to search and replace it.&lt;/p&gt;

&lt;h2&gt;Setting up the class&lt;/h2&gt;

&lt;p&gt;It couldn't be more simple. We just have to create a ruby file under config/initializers (you can name it whatever you want) and specify the YML file which holds the values for you class (config/app_config.yml is used in this example):&lt;/p&gt;

&lt;p&gt;This will open up the class AppConfig with several attributes for you to use throughout your app, for example:&lt;/p&gt;

&lt;p&gt;The class' attributes will be available as a hash:&lt;/p&gt;

&lt;p&gt;You can take advantage of YAML's syntax and use indentation to create a hash of hashes for your values:&lt;/p&gt;

&lt;p&gt;Now your class has some hashes values like this:&lt;/p&gt;

&lt;h2&gt;Enjoy!&lt;/h2&gt;
</content>
   <author>
     <name>Francisco Guzm&amp;aacute;n</name>
     <email>francisco.guzman@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Open and watch specific git branches using gitx</title>
   <link href="http://blog.crowdint.com/2010/08/31/open-and-watch-specific-git-branches-using-gitx.html"/>
   <updated>2010-08-31T00:00:00-05:00</updated>
   <id>http://blog.crowdint.com/2010/08/31/open-and-watch-specific-git-branches-using-gitx</id>
   <content type="html">&lt;p&gt;It happens, the project and the team grows, and now, there's a bunch of branches in your git repo. It's called &lt;em&gt;branchitis&lt;/em&gt;, and it happens to everyone at some point.&lt;/p&gt;

&lt;p&gt;If you're lucky enough to be working on a Mac, odds are that you're using &lt;a href=&quot;http://gitx.frim.nl/&quot;&gt;gitx&lt;/a&gt; to watch over your git repos. You're not?! Shame on you.&lt;/p&gt;

&lt;p&gt;Anyway, so, you open gitx, and all you see is a bowl of spaghetti&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2010/08/31/a.jpg&quot; alt=&quot;Bowl of Spaghetti&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, if you want to see a specific branch, you can call gitx from the command line and specify the branch you want to see&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2010/08/31/b.jpg&quot; alt=&quot;One branch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nothing out of this world here, since you can do the same thing by using the built in dropdown on gitx to select the branch you want to see, but, did you know that you can specify more than one branch?&lt;/p&gt;

&lt;p&gt;So, let's say you want to merge the &lt;em&gt;feature2&lt;/em&gt; and the &lt;em&gt;feature5&lt;/em&gt; branch, but first, you want to see how the branches are related. You can call gitx from the command line and specify &lt;em&gt;both&lt;/em&gt; branches as the arguments.&lt;/p&gt;

&lt;p&gt;Then you'd get something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2010/08/31/c.jpg&quot; alt=&quot;Two branches&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cool! You can actually read this first hand, and it's faster than trying to descipher the spaguhetti.&lt;/p&gt;

&lt;p&gt;In case you're wondering, yes, you can specify 3 branches, or as many as you'd like to see. Go ahead, try it out.&lt;/p&gt;

&lt;p&gt;Hope this helps you in some way,&lt;/p&gt;

&lt;p&gt;Cheers.&lt;/p&gt;
</content>
   <author>
     <name>David Padilla</name>
     <email>david@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Benchmarking thin vs unicorn</title>
   <link href="http://blog.crowdint.com/2010/08/26/thin-vs-unicorn.html"/>
   <updated>2010-08-26T00:00:00-05:00</updated>
   <id>http://blog.crowdint.com/2010/08/26/thin-vs-unicorn</id>
   <content type="html">&lt;p&gt;Hi All!, I have been buzzed lately about Unicorn (one of the newest Ruby web application servers) and I've been asked if we have already tested it, I answered that no, we haven't. We're really happy using nginx + haproxy + thin + akamai.&lt;/p&gt;

&lt;p&gt;But, I have to admit that after to have a short read about unicorn and having some free time, I started to dig at some already performed benchmarking comparisons between thin and unicorn my friend google showed me some, but all I could find were using really small basic scripts. I needed more realistic numbers, so with some beers in my fridge and no plans with my saturday, I decided to take our 5gb database with ~130 tables, a huge rails project and try to do my own research.&lt;/p&gt;

&lt;p&gt;Let's start with my nginx.conf, it looks like this &lt;a href=&quot;/extras/2010/08/26/nginx.conf.txt&quot;&gt;nginx.conf&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;I'm going to use rvm to create isolated environments, since I am familiar with thin, I'll start with it.&lt;/p&gt;

&lt;p&gt;Good! I'm happy to have bundler, I might've spent all my afternoon installing required gems by hand. But, we're here to see numbers:&lt;/p&gt;

&lt;p&gt;It's ready, my nginx is listening two virtual hosts and I've added to my /etc/hosts these virtual names. Ok, since we're starting, let's use small numbers&lt;/p&gt;

&lt;p&gt;Mhm, 713 ms per request, I've seen better numbers in our production servers, but well, I'm doing this in my MBP, without memcached and mysql query cached disabled, so, I'd say that: cool!&lt;/p&gt;

&lt;p&gt;Now let's work with Unicorn:&lt;/p&gt;

&lt;p&gt;Done... I love bundler, I really do, OK, let's continue with our tests:&lt;/p&gt;

&lt;p&gt;Ok, decent numbers with small difference and knowing that we used a single app server for both, let's simulate a little bit more a production config:&lt;/p&gt;

&lt;p&gt;I've adjusted my nginx.conf to support multiples thins&lt;/p&gt;

&lt;p&gt;And I started 5 thins listening in ports 3000-3004&lt;/p&gt;

&lt;p&gt;I'll use 100 requests with 15 concurrent users(remember that I'm using my MBP).&lt;/p&gt;

&lt;p&gt;Whohoo 399ms, no bad for 15 concurrent users and 100 requests, it's time to see how unicorn performs, I tried to read unicorn documentation and I saw I can adjust unicorn behavior via custom configurator.rb, but since I'm lazy engineer I've modified unicorn gem directly to start with 5 workers:&lt;/p&gt;

&lt;p&gt;Done, I have unicorn running 5 workers and listening at port 8000, let's send it the same traffic:&lt;/p&gt;

&lt;p&gt;Look at that!!! the difference is minimal, this is a really huge surprise.&lt;/p&gt;

&lt;p&gt;Ok, I'll run tests using extreme over loading against the same 5 thins and unicorn with 5 workers (For each test I restarted my machine):&lt;/p&gt;

&lt;p&gt;Wow! my machine survived...&lt;/p&gt;

&lt;p&gt;Wow! look at that numbers, specifically: Failed Requests, Requests per second, TIme per request and Transfer rate, it looks like unicorn performs better on heavy loading, I'll post another performance numbers with more production like environment running in a dedicated server hosted in rackspace with more advanced features for each configurations: caching, fail over, haproxy between nginx and thins, cdn, etc. Wait for it, I'll try to include some NewRelic numbers and use different pages/modules.&lt;/p&gt;

&lt;p&gt;Ok, there're the numbers, think about if it's worth to change any current infrastructure, monitoring tools, deployment scripts, etc to switch between each other. We've taken ours x).&lt;/p&gt;

&lt;h2&gt;Machine used:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Processor: 2.4 GHz Intel Core i5
Memory: 4GB 1067 MHz DDR3
Mac OS X: 10.6.3
&lt;/code&gt;&lt;/pre&gt;
</content>
   <author>
     <name>Edwin Cruz</name>
     <email>edwin.cruz@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>What I would've loved I had known when I first met Ruby</title>
   <link href="http://blog.crowdint.com/2010/08/20/what-i-would-ve-loved-to-know-when-i-first-met-ruby.html"/>
   <updated>2010-08-20T00:00:00-05:00</updated>
   <id>http://blog.crowdint.com/2010/08/20/what-i-would-ve-loved-to-know-when-i-first-met-ruby</id>
   <content type="html">&lt;h2&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Everytime I'm learning a new language, the first thing I try to learn is how this new language
implements OOP, and now it's Ruby's turn. Before joining Crowd Interactive I had been playing with Java for some
years; then I first heard about Ruby being a fully OOP language I got really excited, and
when I got hands-on some existing Ruby code, things got confusing.&lt;/p&gt;

&lt;p&gt;I would've liked to know all of this before looking at any Ruby code:&lt;/p&gt;

&lt;h2&gt;First things first: Ruby Objects&lt;/h2&gt;

&lt;p&gt;Things that we must know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;And object is formed by: State + Behavior = Object&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Everything in Ruby is an object, even nil which is &lt;em&gt;NilClass&lt;/em&gt;, false &lt;em&gt;FalseClass&lt;/em&gt;, true &lt;em&gt;TrueClass&lt;/em&gt; and modules&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do you remember those so-called 'static classes' in languages other than Ruby? They're objects too,
and when I say objects, I really mean it. Consider the following code stored in test.rb file:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Let's play with it using irb:&lt;/p&gt;

&lt;p&gt;As you can see both are &lt;em&gt;A&lt;/em&gt; objects whose type is &lt;em&gt;Class&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Those class names are constants containing references to objects:&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Self&lt;/h2&gt;

&lt;p&gt;When I first met Ruby I thought &quot;self&quot; was the same as &lt;em&gt;this&lt;/em&gt; (like in many other languages), and I was wrong, so lets
see what it is:&lt;/p&gt;

&lt;h4&gt;Default receiver of method calls&lt;/h4&gt;

&lt;p&gt;Since everything in Ruby are objects, then all the function definitions we find defined all around
and all those functions we call like &lt;a href=&quot;http://ruby-doc.org/core/classes/Kernel.html#M005961&quot;&gt;p&lt;/a&gt;,
&lt;a href=&quot;http://ruby-doc.org/core/classes/Kernel.html#M005954&quot;&gt;puts&lt;/a&gt;, def, etc are method calls. Some may
not be exactly defined inside a class but, in the end they will get either inherited or mixed in.&lt;/p&gt;

&lt;p&gt;Look at following example:&lt;/p&gt;

&lt;p&gt;Running this script we see:&lt;/p&gt;

&lt;h4&gt;Where instance variables are found&lt;/h4&gt;

&lt;p&gt;Running this script we see:&lt;/p&gt;

&lt;h2&gt;Metaprogramming&lt;/h2&gt;

&lt;p&gt;This is why I fell in love with ruby, it is a huge topic which I won't cover, but it allows you
to write code that writes code lets see some examples:&lt;/p&gt;

&lt;h4&gt;Create a &lt;em&gt;A Class&lt;/em&gt;, re-open it and see how it is the same object&lt;/h4&gt;

&lt;p&gt;Which throws:&lt;/p&gt;

&lt;p&gt;As you saw the object id remains the same after re-open a class in order to add a second method, also,
we got all instance methods that one &lt;a href=&quot;http://ruby-doc.org/core/classes/Object.html#M000350&quot;&gt;class&lt;/a&gt;
of &lt;em&gt;A&lt;/em&gt; would have.&lt;/p&gt;

&lt;h4&gt;Call all instance methods of a certain class whenever you call a method whose name matches&lt;/h4&gt;

&lt;p&gt;Which throws:&lt;/p&gt;

&lt;p&gt;That's it. I hope this gives you some good overview and if you are ready for the whole package I
suggest you start with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some good metaprogramming screencasts &lt;a href=&quot;http://pragprog.com/screencasts/v-dtrubyom/the-ruby-object-model-and-metaprogramming&quot;&gt;Pragmatic Programmers screencasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An in deep look at &lt;a href=&quot;http://raflabs.com/blogs/silence-is-foo/2009/12/13/the-ruby-object-model/&quot;&gt;Rafa Maga&amp;ntilde;a's presentation&lt;/a&gt; on Ruby object model&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Happy programming!&lt;/p&gt;
</content>
   <author>
     <name>Emmanuel Delgado</name>
     <email>emmanuel.delgado@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Use a project specific Ruby version with RVM</title>
   <link href="http://blog.crowdint.com/2010/08/17/use-a-project-specific-ruby-version-rvm.html"/>
   <updated>2010-08-17T00:00:00-05:00</updated>
   <id>http://blog.crowdint.com/2010/08/17/use-a-project-specific-ruby-version-rvm</id>
   <content type="html">&lt;p&gt;If you are using &lt;a href=&quot;http://rvm.beginrescueend.com/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;RVM&lt;/span&gt;&lt;/a&gt; in your machine (just as &lt;a href=&quot;/2010/07/28/getting-started-with-rvm.html&quot;&gt;Francisco showed us&lt;/a&gt; the other day) then you should take advantage of the &lt;a href=&quot;http://rvm.beginrescueend.com/workflow/rvmrc/#project&quot;&gt;project .rvmrc&lt;/a&gt; feature.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s say your project is in the directory:&lt;/p&gt;
&lt;/notextile&gt;

And you have ruby-1.8.7 and ruby-1.9.2 in RVM and you want to use 1.9.2 ruby version in that project.

Then you can put this in your @~/repo/myproject/.rvmrc@ file:

Liquid error: Broken pipe

So, every time you change to that project directory, *RVM will change to the specified ruby version*.

Liquid error: Broken pipe

As you can see, first we are using Ruby version 1.8.7, after the change to our project directory, the version selected in the @.rvmrc@ is used: 1.9.2
Once you abandon the project directory, your default Ruby version will be used!

It even *works with gemsets* so you can have something like this in your @.rvmrc@ file:

&lt;notextile&gt;&lt;p&gt;&lt;strong&gt;And every time you cd into your directory, your ruby version and gemset will be changed :)&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;Whether this file should or shouldn&amp;#8217;t be in your project repo is up to you, but &lt;span class=&quot;caps&quot;&gt;IMO&lt;/span&gt; it should be ignored, creating the possibility to be defined by every user&amp;#8230;&lt;/p&gt;
&lt;p&gt;What do you think about that?&lt;/p&gt;</content>
   <author>
     <name>Chalo Fernandez</name>
     <email>gonzalo.fernandez@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Improve performance between attachment_fu and acts_as_list</title>
   <link href="http://blog.crowdint.com/2010/08/13/fix-incompatibility-with-attachment-fu-and-acts-as-list.html"/>
   <updated>2010-08-13T00:00:00-05:00</updated>
   <id>http://blog.crowdint.com/2010/08/13/fix-incompatibility-with-attachment-fu-and-acts-as-list</id>
   <content type="html">&lt;p&gt;If you are stuck in your project using &lt;a href=&quot;http://github.com/technoweenie/attachment_fu&quot;&gt;&lt;em&gt;&lt;strong&gt;attachment_fu&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; and&lt;br /&gt;
&lt;a href=&quot;http://github.com/rails/acts_as_list&quot;&gt;&lt;em&gt;&lt;strong&gt;acts_as_list&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; plugins/gems in your project,&lt;br /&gt;
you might be facing a weird performance issue when dealing with images with thumbnails.&lt;/p&gt;
&lt;p&gt;Every time an image is added, modified or deleted, for each one of the thumbnails a query like this is executed:&lt;/p&gt;
&lt;/notextile&gt;

Even if this query is limited to 1 row, this is a really *slow query*. For example in my development machine, each of these queries take about ~900ms (yes! the __images__ table is HUGE).

So, let's assume the following models:

Liquid error: Broken pipe

p. So, there are Articles which contain several Images ordered by position (through acts_as_list plugin) and each image has 2 additional thumbnails.

If you add an image attachment now... *the slow query will be executed for each thumbnail*. The reasons are:

# The image file is uploaded to the server.
# attachment_fu saves the image and creates a new Image row with article_id established.
# acts_as_list assigns the position attribute to the parent image.
# attachment_fu creates the first thumbnail, with parent_id = image_id (the one created in step #2) and thumbnail = :thumb, but article_id = NULL
# acts_as_list assigns the position attribute to images after the thumbnail created.
# Repeat step #4 and #5 for each thumbnail to be created.

The problem with this procedure, if you see the acts_as_list source code:

&lt;notextile&gt;&lt;p&gt;As we configured our Image model to use &lt;code&gt;acts_as_list :scope =&amp;gt; :article!&lt;/code&gt;, and in the thumbnails the article_id is &lt;span class=&quot;caps&quot;&gt;NULL&lt;/span&gt;, the condition is generated as &amp;#8220;&lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;WHERE&lt;/span&gt; (article_id  IS &lt;span class=&quot;caps&quot;&gt;NULL&lt;/span&gt;)&lt;/strong&gt;&amp;#8221;.&lt;/p&gt;
&lt;p&gt;To avoid this, you need to manually &lt;strong&gt;set the article_id value before the thumbnails are saved&lt;/strong&gt;. This can be done using a &lt;strong&gt;callback in the Image model&lt;/strong&gt; (as suggested in acts_as_list source code):&lt;/p&gt;
&lt;p&gt;Liquid error: Broken pipe&lt;/p&gt;
&lt;p&gt;With this callback, after generating a thumbnail each image will have the &lt;code&gt;article_id&lt;/code&gt; attribute filled. Thus in the Article model, the has_many relation is defined as:&lt;/p&gt;
&lt;p&gt;&lt;/notextile&gt;&lt;/p&gt;
&lt;p&gt;Now, &lt;strong&gt;only the article images will have thumbnail.nil&lt;/strong&gt; and the thumbnails will be hidden in the image.thumbnails relation.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;In our project, we &lt;strong&gt;expected a 570% &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; improvement&lt;/strong&gt; when creating, modifying or deleting image attachments.&lt;/p&gt;</content>
   <author>
     <name>Chalo Fernandez</name>
     <email>gonzalo.fernandez@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Our git workflow</title>
   <link href="http://blog.crowdint.com/2010/08/06/our-git-workflow.html"/>
   <updated>2010-08-06T00:00:00-05:00</updated>
   <id>http://blog.crowdint.com/2010/08/06/our-git-workflow</id>
   <content type="html">&lt;p&gt;Using git to track changes on your source code is an easy task, a branch here, a merge there, no big deal. But, when you add different teams and features to the mix, things can get a little tricky.&lt;/p&gt;

&lt;p&gt;Here is how we do git, hoping this explanation helps someone understand &lt;em&gt;the power of git&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let's say we have our first commit A.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2010/08/09/a.jpg&quot; alt=&quot;A&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, we're developing Feature 1, and one of our teammates is developing Feature 2. At this point, we'd like to create a branch per feature.&lt;/p&gt;

&lt;p&gt;Now, Team Feature 1 works hard and commits B and C.&lt;/p&gt;

&lt;p&gt;Now, our tree looks a bit like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2010/08/09/b.jpg&quot; alt=&quot;B&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Team Feature 2 catches up and creates commit D&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2010/08/09/c.jpg&quot; alt=&quot;C&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once a feature has been tested and approved for production, we merge it into master. If Feature 2 was approved first:&lt;/p&gt;

&lt;p&gt;Liquid error: Broken pipe&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2010/08/09/d.jpg&quot; alt=&quot;D&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Master was unchanged since the time the feature2 branch was created, so, what happens here is called a fast-forward, there's no merge or rebase involved, master simply now points to D.&lt;/p&gt;

&lt;p&gt;Once Feature 1 is approved, we want to merge it into master too. We can't do a Fast-Forward here because master now has Feature 2 in it, so, the first thing to do is merge &lt;em&gt;master into feature1&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2010/08/09/e.jpg&quot; alt=&quot;E&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Test, Test, Test. In case we find a bug, or a feature incompatibility, we know the problem exists only on our feature branch, master remains stable.&lt;/p&gt;

&lt;p&gt;After we're sure everything is going to be all right, we now merge &lt;em&gt;feature1 into master&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2010/08/09/f.jpg&quot; alt=&quot;F&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since no changes where required, once again, master is Fast-Forwarded. Now, it is the Feature2 team's responsibility to update their branch with the recent updates we did on master.&lt;/p&gt;

&lt;p&gt;Now, all of the branches are at the same level and both teams are ready to start working on new features.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2010/08/09/h.jpg&quot; alt=&quot;H&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And that's basically how we use git, on a small scale. In real life we do this for 4 - 5 features being developed at the same time by teams of 2 - 4 people, but we follow the same workflow.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</content>
   <author>
     <name>David Padilla</name>
     <email>david@crowdint.com</email>
   </author>
 </entry>
 
 
</feed>